jpf-nhandler = ${config_path}

jpf-nhandler.native_classpath =\
   ${jpf-nhandler}/build/jpf-nhandler.jar;\
   ${jpf-nhandler}/lib/*.jar;\
   ${jpf-nhandler}/build/examples;\
   ${jpf-nhandler}/build/tests

jpf-nhandler.classpath =\
   ${jpf-nhandler}/build/jpf-nhandler-classes.jar;\
   ${jpf-nhandler}/build/examples

jpf-nhandler.test_classpath =\
   ${jpf-nhandler}/build/tests

jpf-nhandler.sourcepath =\
   ${jpf-nhandler}/src/examples

jpf-nhandler.peer_packages = test.converter

vm.sysprop.source=host

listener+=,gov.nasa.jpf.vm.JVMForwarder

#################################################################################

## By setting this to true, all the peers (both classes and source files) created 
## on the fly, in the onthefly dir, are removed once the search starts.
nhandler.clean = false

## By setting this to false, the map keeping JVM objects on the host VM side is
## not reset after each delegation.
## <todo> - note that we don't maintain the states of JVM objects for now, i.e.
## if a JPF object changes we do not affect the similar changes on the JVM side.
nhandler.resetVMState = true

## By setting this to true the source code for native peers will be generated.
## To compile the edited sources, run the script jpf-nhandler/bin/compileOTF
nhandler.genSource = false

## By setting this to true the body of the methods will be commented.
nhandler.addComment = false

## By setting this to true states of JPF objects are updated from their corresponding
## JVM objects
nhandler.updateJPFState = true

## By setting this to true all unhandled native calls will be handled.
# nhandler.delegateUnhandledNative = true

## By setting this to true all unhandled native calls will be skipped, i.e. they
## are executed as they are empty and return some dummy value.
# nhandler.skipNative = true

#################################################################################
## Using the following three options user can configure which methods to delegate,
## to skip, and to ignore. You should follow the same format as in MethodSpec 
## that can match methods/args against specs
##
## some examples:
##   "x.y.Foo.*"
##   "x.y.F*"
#################################################################################

## List of the methods to be delegated by jpf-nhandler.
nhandler.spec.delegate = java.net.ServerSocket.*,\
  java.net.Socket.*,\
  java.net.SocketInputStream.*,\
  java.net.SocketOutputStream.*,\
  java.util.zip.ZipFile.*,\
  java.util.zip.ZipFile$ZipFileInputStream.*,\
  java.util.zip.ZipFile$ZipFileInflaterInputStream.*,\
  java.util.jar.JarFile.*,\
  sun.net.www.protocol.jar.URLJarFile.*,\
  sun.net.www.protocol.jar.JarURLConnection.*,\
  java.util.zip.Inflater.*,\
  java.util.ResourceBundle.*,\
  java.util.zip.CRC32.*,\
  sun.nio.ch.IOUtil.*,\
  sun.nio.ch.KQueueArrayWrapper.*,\
  java.util.zip.Deflater.*

## Only native methods among this list will be delegated by jpf-nhandler.
nhandler.spec.delegateNative = 

## List of the methods to be skipped, i.e. they are executed as they are empty
## and return some dummey value.
nhandler.spec.skip =

## List of methods to be filtered.
nhandler.spec.filter =

#################################################################################
## <2do> - this option has not been implemented yet.
## by setting this to true, nhandler creates the on-the-fly peer classes while 
## handling & skipping the methods, OW it just execute them directly outside of 
## on-the-fly peers
# nhandler.create.OTF_peers = true