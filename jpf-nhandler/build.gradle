////////////////// sourceSet part //////////////////
/*
 * sourceSet list:
 *    main(default in Gradle) -> main handler implementation
 *    annotations -> JPF annotations
 *    classes -> model classes
 *    peers -> peer methods
 *    examples -> handler examples
 */
sourceSets {
    annotations{}
    classes{}
    peers {}
    examples {}
}

def libFolder = fileTree(dir: "$projectDir/lib", include: '*.jar')
dependencies {
    compile libFolder, project(":VarexJ")
    annotationsCompile libFolder, project(":VarexJ")
    classesCompile libFolder, project(":VarexJ")
    peersCompile libFolder, project(":VarexJ")
    examplesCompile libFolder, project(":VarexJ")
}

////////////////// Build part //////////////////
task classesJar(type: Jar) {
    archiveName = 'jpf-nhandler-classes.jar'
    from sourceSets.classes.output
    from sourceSets.annotations.output
}

task annotationsJar(type: Jar) {
    archiveName = 'jpf-nhandler-annotations.jar'
    from sourceSets.annotations.output
}

jar {
    archiveName = 'jpf-nhandler.jar'
    from(sourceSets.main.output)
    from(sourceSets.peers.output)
    dependsOn classesJar, annotationsJar
}

////////////////// Testing part //////////////////

test {
    minHeapSize = "512m"
    maxHeapSize = "1024m"
    include '**/*Test.class'
    exclude '**/JPF_*.class'
}